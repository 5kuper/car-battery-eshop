// <auto-generated />
using System;
using BattAPI.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BattAPI.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BattAPI.Domain.Entities.Files.FileMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FileMeta");

                    b.HasDiscriminator().HasValue("FileMeta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<bool>("InStock")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WarrantyMonths")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Files.NoteAttachmentMeta", b =>
                {
                    b.HasBaseType("BattAPI.Domain.Entities.Files.FileMeta");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.HasIndex("NoteId");

                    b.HasDiscriminator().HasValue("NoteAttachmentMeta");
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Files.ProductImageMeta", b =>
                {
                    b.HasBaseType("BattAPI.Domain.Entities.Files.FileMeta");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ProductImageMeta");
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Products.Battery", b =>
                {
                    b.HasBaseType("BattAPI.Domain.Entities.Products.Product");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.ToTable("Batteries");
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Files.NoteAttachmentMeta", b =>
                {
                    b.HasOne("BattAPI.Domain.Entities.Note", "Note")
                        .WithMany("Attachments")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Files.ProductImageMeta", b =>
                {
                    b.HasOne("BattAPI.Domain.Entities.Products.Product", "Product")
                        .WithOne("ImageMeta")
                        .HasForeignKey("BattAPI.Domain.Entities.Files.ProductImageMeta", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Products.Battery", b =>
                {
                    b.HasOne("BattAPI.Domain.Entities.Products.Product", null)
                        .WithOne()
                        .HasForeignKey("BattAPI.Domain.Entities.Products.Battery", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BattAPI.Domain.ValueObj.BatterySpecs", "Specs", b1 =>
                        {
                            b1.Property<Guid>("BatteryId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Capacity")
                                .HasColumnType("integer");

                            b1.Property<int>("StartPower")
                                .HasColumnType("integer");

                            b1.Property<int>("StartPowerRating")
                                .HasColumnType("integer");

                            b1.Property<int>("Voltage")
                                .HasColumnType("integer");

                            b1.HasKey("BatteryId");

                            b1.ToTable("Batteries");

                            b1.WithOwner()
                                .HasForeignKey("BatteryId");
                        });

                    b.Navigation("Specs")
                        .IsRequired();
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Note", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("BattAPI.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("ImageMeta");
                });
#pragma warning restore 612, 618
        }
    }
}
